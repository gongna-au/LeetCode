package main
import "fmt"

/*
概念讲解关于动态规划的资料很多，官方的定义是指把多阶段过程转化为一系列单阶段问题，利用各阶段
之间的关系，逐个求解。概念中的各阶段之间的关系，其实指的就是状态转移方程。很多人觉得
DP难（下文统称动态规划为DP），根本原因是因为DP跟一些固定形式的算法不同（比如DFS、
二分法、KMP），它没有实际的步骤规定第一步、第二步来做什么，所以准确来说，DP其实是一
种解决问题的思想。
爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。每次你可以爬 1 或 2 个台阶。你有多少种不同的
方法可以爬到楼顶呢？ 注意：给定 n 是一个正整数。
示例 1：
1 输入： 2
2 1. 1 阶 + 1 阶
输出： 2
3 2. 2 阶
解释： 有两种方法可以爬到楼顶。
示例 2：
1 输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
2 1. 1 阶 + 1 阶 + 1 阶
3 2. 1 阶 + 2 阶
4 3. 2 阶 + 1 阶
*/

func climbStairs( n int )int{
	if n==1{
		return 1
	}
	dp:=make([]int,n-1)
	dp[1]=1
	dp[2]=2
	for i:=3;i<n+1;i++{
		dp[i]=dp[i-1]+dp[i-2]
	}
	return dp[n]

}
func main(){
	n:=6
	fmt.Println(climbStairs(n))
}