/* 返回一个数二进制中1的个数(191)
今天继续分享一道和位运算有关的题型，同样在难度上属于简单。我们还是从一道题开始吧
01、题目示例
这道题，大家先想一想是用什么思路进行求解？
位1的个数
编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为
汉明重量）。 */
package main
import "fmt"
func NumOfOne(n int ) int{
	if n<=0 {
		return 0
	}else if n%2 != 0 {
		
		return 1+NumOfOne(n>>1)
	}else {
		
		return 0+NumOfOne(n>>1)
	}
	//1 0 1 0 1 1
	
}
/* 输入：00000000000000000000000000001011
   输出：3
   解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'
   输入：00000000000000000000000010000000
   输出：1
   解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
   输入：11111111111111111111111111111101
   输出：31
   解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'
 */
func main(){
	n := 0b00000000000000000000000000001011
	m := 0b00000000000000000000000010000000
	p := 0b11111111111111111111111111111101
	fmt.Println(NumOfOne(n))
	fmt.Println(NumOfOne(m))
	fmt.Println(NumOfOne(p))







}


